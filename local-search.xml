<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/22/hello-world/"/>
    <url>/2021/04/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章-绪论</title>
    <link href="/2021/04/22/%E7%AC%AC%E4%B8%80%E7%AB%A0_%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/04/22/%E7%AC%AC%E4%B8%80%E7%AB%A0_%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="考纲内容"><a href="#考纲内容" class="headerlink" title="考纲内容"></a>考纲内容</h1><p>（1）数据结构的相关概念和术语</p><p>（2）数据结构三要素：逻辑结构、物理结构和数据运算</p><p>（3）算法时间复杂度和空间复杂度的分析与计算</p><h1 id="知识框架"><a href="#知识框架" class="headerlink" title="知识框架"></a>知识框架</h1><p><img src="https://i.loli.net/2021/04/22/6hB8HdN4rUqaglD.png" alt="绪论"></p><h2 id="1-1-数据结构的基本概念"><a href="#1-1-数据结构的基本概念" class="headerlink" title="1.1 数据结构的基本概念"></a>1.1 数据结构的基本概念</h2><h3 id="1-1-1-基本概念和术语"><a href="#1-1-1-基本概念和术语" class="headerlink" title="1.1.1 基本概念和术语"></a>1.1.1 基本概念和术语</h3><ol><li><strong>数据</strong></li></ol><p>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号集合。</p><ol><li><strong>数据元素</strong></li></ol><p><code>数据元素</code>是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，<code>数据项</code>是构成数据元素的不可分割的最小单位。</p><ol><li><strong>数据对象</strong></li></ol><p>数据对象是具有相同数据元素的集合，是数据的一个子集。</p><ol><li><strong>数据类型</strong></li></ol><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称。</p><p>1）原子类型</p><p>其值不可再分的数据类型。</p><p>2）结构类型</p><p>其值可以再分解为若干成分（分量）的数据类型。</p><p>3）抽象数据类型</p><p>抽象数据组织及与之相关的操作。</p><ol><li><strong>数据结构</strong></li></ol><p><code>数据结构</code>是相互之间存在一种或多种特定关系的数据元素的集合。</p><p>数据元素之间的关系成为<code>结构（Structure）</code>。</p><p>数据结构包括三方面的内容：<code>逻辑结构</code>、<code>存储结构</code>和<code>数据的运算</code>。</p><p>算法的设计取决于选定的逻辑结构，算法的实现依赖于采用的存储结构。</p><h3 id="1-1-2-数据结构三要素"><a href="#1-1-2-数据结构三要素" class="headerlink" title="1.1.2 数据结构三要素"></a>1.1.2 数据结构三要素</h3><ol><li><strong>数据的逻辑结构</strong></li></ol><p>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。</p><p>与数据的存储无关，是独立于计算机的。</p><p>数据的逻辑结构分类线性结构和非线性结构。</p><p><img src="https://i.loli.net/2021/04/22/ex7bpK9MyThCOSd.png" alt="数据的逻辑结构"></p><p><strong>集合</strong>：结构中的数据元素之间除“同属一个集合”外，别无其他关系。</p><p><strong>线性结构</strong>：结构中的数据元素之间只存在一对一的关系。</p><p><strong>树形结构</strong>：结构中的数据元素存在一对多的关系。</p><p><strong>图状结构</strong>：结构中的数据元素存在多对多的关系。</p><ol><li><strong>数据的存储结构</strong></li></ol><p>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。</p><p>包括数据元素的表示和关系的表示。</p><p>数据的存储结构使用计算机语言实现的逻辑结构，依赖于计算机语言。</p><p><strong>数据结构的存储结构主要有：顺序存储、链式存储、缩阴存储和散列存储。</strong></p><p> 1）<strong>顺序存储</strong></p><p>把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p><p><strong>优点</strong>：可以实现随机存取，每个元素占用最少的存储空间。</p><p><strong>缺点</strong>：只能使用相邻的一整块存储单元，因此可能产生较多的外部碎片。</p><p>2）<strong>链式存储</strong></p><p>不要求逻辑上相邻的元素在物理上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。</p><p><strong>优点</strong>：不会出现碎片现象，能充分利用所有存储单元。</p><p><strong>缺点</strong>：每个元素因存储指针而占用额外的存储空间。，只能实现顺序存取。</p><p>3）<strong>索引存储</strong></p><p>在存储信息的同时，还建立附加的索引表。索引表中的每项成为<code>索引项</code>，索引的一般形式是（关键字，地址）。</p><p><strong>优点</strong>：检索速度快。</p><p><strong>缺点</strong>：附加的索引表额外占用存储空间。增加和删除数据时也要修改索引表，因而会花费较多的时间。</p><p>4）<strong>散列存储</strong></p><p>根据元素的关键字直接计算出该元素的存储地址，又称<code>哈希（Hash）存储</code>。</p><p><strong>优点</strong>：检索、增加和删除结点的操作都很快。</p><p><strong>缺点</strong>：散列函数不好，可能会出现元素存储单元的冲突，而解决冲突会增加时间和空间开销。</p><ol><li><strong>数据的运算</strong></li></ol><p>施加在数据上的运算包括运算的定义和实现。</p><p><code>运算的定义</code>是针对逻辑结构的，指出运算的功能。</p><p><code>运算的实现</code>是针对存储结构的，指出运算的具体操作步骤。</p><h2 id="1-2-算法和算法评价"><a href="#1-2-算法和算法评价" class="headerlink" title="1.2 算法和算法评价"></a>1.2 算法和算法评价</h2><h3 id="1-2-1-算法的基本概念"><a href="#1-2-1-算法的基本概念" class="headerlink" title="1.2.1 算法的基本概念"></a>1.2.1 算法的基本概念</h3><p><code>算法（Algorithm）</code>是对特定问题求解步骤的一种描述，它是指令的有序序列，其中的每条指令表示一个或多个操作。</p><p>一个算法具有5个重要的特性：</p><p>1）有穷性</p><p>一个算法必须在执行有穷步之后结束，且每一步都在有穷时间完成。</p><p>2）<strong>确定性</strong></p><p>算法中的每条置顶必须有确切的含义，对于相同的输入只能得出相同的输出。</p><p>3）<strong>可行性</strong></p><p>算法中描述的基本操作都可以通过已经实现的基本运算执行有限次数来实现。</p><p>4）<strong>输入</strong></p><p>一个算法有零个或多个输入，这些输入取自于某个特定的对象集合。</p><p>5）<strong>输出</strong></p><p>一个算法有一个或多个输出，这些输出是与输入有某种特定关系的量。</p><p>一个好的算法应该考虑达到以下目标：</p><p>1）<strong>正确性</strong></p><p>算法能够正确的解决求解问题。</p><p>2）<strong>可读性</strong></p><p>算法应该具有良好的可读性，以帮助人们理解。</p><p>3）<strong>健壮性</strong></p><p>输入非法数据时，算法能适当地做出反应或作出处理，而不会产生莫名其妙的输出结果。</p><p>4）<strong>效率与低存储量需求</strong></p><p>效率是指算法执行的时间。</p><p>存储量需求是指算法执行过程中所需要的最大存储空间。</p><p>两个都与问题的规模有关。</p><h3 id="1-2-2-算法效率的度量"><a href="#1-2-2-算法效率的度量" class="headerlink" title="1.2.2 算法效率的度量"></a>1.2.2 算法效率的度量</h3><p>算法效率的度量是通过<code>时间复杂度</code>和<code>空间复杂度</code>来描述的。</p><ol><li><strong>时间复杂度</strong></li></ol><p>一个语句的频度是指该语句在算法中被重复执行的次数。</p><p>算法中所有语句的频度之和T (n) ，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。</p><p>算法中基本运算（最深层循环内的语句）的频度与T(n)同数量级，因此通常采用算法中基本运算的频度f(n)来分析算法的时间复杂度。</p><p><strong>算法时间复杂度记为：T(n)=O(f(n))</strong></p><p>O的含义是T(n)的数量级，严格的数学定义：</p><p>若T(n)和f(n)是定义在正整数集合上的两个函数，则存在正常数C和n<sub>0</sub>,使得n&gt;=n<sub>0</sub>时，都满足0&lt;=T(n)&lt;=Cf(n)</p><p><strong>最坏时间复杂度</strong>：在最坏情况下，算法的时间复杂度。</p><p><strong>最好时间复杂度</strong>：在最好情况下，算法的时间复杂度。</p><p><strong>平均时间复杂度</strong>：指所有可能输入实例在等概率出现的情况下，算法的期望运行时间。</p><p>一般总考虑最坏情况下的时间复杂度，以保证算法的运行时间不会比它更长。</p><p>分析一个程序的时间复杂度有两条规则：</p><p>1）<strong>加法规则</strong></p><p>T ( n ) = T <sub>1</sub>( n ) + T<sub>2</sub>( n ) = O(f ( n )) + O ( g ( n ) ) = O ( max ((f( n ) , g ( n ) ) )</p><p>2)<strong>乘法规则</strong></p><p>T ( n ) = T <sub>1</sub>( n ) <em> T<sub>2</sub>( n ) = O(f ( n ) )</em>O ( g ( n ) ) = O ( f( n ) * g ( n ) )</p><p>常见的渐近时间复杂度为：</p><p>O ( 1 ) &lt; O ( log<sub>2</sub>n ) &lt; O ( n ) &lt; O ( n  log<sub>2</sub>n ) &lt; O ( n<sup>2</sup>) &lt; O (n<sup>3</sup>) &lt; O ( <sub>2</sub>n ) &lt; O ( n! ) &lt; O ( n<sup>n</sup> )  </p><ol><li><strong>空间复杂度</strong></li></ol><p>算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。记为：</p><p>S(n)=O(g(n))</p><p>若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。</p><p><code>算法原地工作</code>是指算法所需的辅助空间为常量，即O(1)。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
